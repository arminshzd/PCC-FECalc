{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PCC-FECalc: Binding Free Energy Calculations for Protein-Catalyzed Capture Agents \ud83d\udcd6 Overview This repository provides a python framework for performing binding free energy calculations for a user-defined target molecule and a protein-catalyzed capture (PCC) agent with a user-defined epitope sequence. The core of this package is based on \"High-throughput virtual screening of protein-catalyzed capture agents for novel hydrogel-nanoparticle fentanyl sensors\" and the corresponding repository . Please refer to the original paper for a more technical explanation of the theory and the setup behind the free energy calculations done with this framework. For setup instructions, see Installation instructions . \ud83d\ude80 Features The framework is organized into four main submodules that work in serial to perform a complete binding free energy calculation using GROMACS: PCCBuilder : This object creates a PCC with a given sequence, calculates GAFF2 parameters for it, and minimizes it. TargetMOL : Similar to PCCBuilder , creates input structures and force field parameters for a provided target molecule. FECalc : Brings together the PCC and the target molecule, solvates them in a water box, and performs minimization, NVT, and NPT equilibration, runs a parallel-bias metadynamics simulation, and reweights the resulting trajectory for free energy calculations. postprocess : Uses the reweighted statistics to calculate the 3D binding free energy volume of the PCC-molecule complex and calculates the binding free energy and dissociation constant. \ud83d\udee0 Usage See example/pcc_submit_test.py for a sample calculation setup. This framework additionally relies on PyMOL and acpype for PCC mutations and GAFF2 parameter generation. acpype is installed automatically as a Python package. PyMOL is required but not installed automatically because no pip wheel is available. Install PyMOL separately from pymol.org or build from the open-source GitHub repository . There's also a conda package package available: conda install -c conda-forge pymol-open-source Ensure the pymol executable is on your PATH . The acpype workflow uses the sqm program from AmberTools, so install AmberTools and libgfortran5 after setting up the repository: conda install -c conda-forge ambertools libgfortran5 The calculations happen through four steps and each step requires a JSON files with the necessary user parameters: Step 1: Building the PCC The settings file for this step is pre-made in FECalc/PCCBuilder_settings.JSON and generally requires no modification. By default, calling PCCBuilder.create will halt after each major stage so you can manually inspect the generated PCC structure and the parameters produced by acpype . Rerun the method to continue to the next step. If you prefer to run the entire preparation in one go, call PCCBuilder.create(check=False) to skip these pauses. Step 2: Building the target The settings file for this step should be created by the user. Two example are provided in example/ACT_settings.JSON for acetaminophen and example/FEN_settings.JSON for fentanyl. The mandatory entries are: name : Name of the target. Used for creating subdirectories and making reports. charge : Total charge of the target. anchor1 : Anchor point defined using the atoms on the target molecule. This is used together with anchor2 to define a vector that is used in determining the relative position and orientation of the target molecule with respect to the PCC during the PBMetaD calculations. See the original publication for a detailed explanation of how this vector is used in the collective variables. anchor2 : See above. output_dir : Path to the folder to store the parameter calculations and minimization. input_pdb_dir : Input pdb file of the target molecule structure. Step 3: Enhanced sampling calculations The settings file for this step should be created by the user. An example is provided in example/system_settings.JSON . The mandatory entries are: PCC_output_dir : Path to the output folder that holds the PCC calculations. PCC_settings_json : Path to the JSON file for the PCC. MOL_settings_json : Path to the JSON file for the target. temperature : Temperature of the simulations box_size : Size of the simulation box. Cubic periodic. complex_output_dir : Path to the out directory for the free energy calculations. The contents of this directory will be as follows: {PCC sequence}_{target name}/ \u2502-- em/ # Minimization \u2502-- nvt/ # NVT equilibration \u2502-- npt/ # NPT equilibration \u2502-- md/ # PBMetaD simulation \u2502-- reweight/ # Reweighting The optional entries are: scheduler : Scheduler used to allocate hardware resources. Supported options are \"local\" (default), \"slurm\" , \"pbs\" , and \"lsf\" . nodes , cores , threads : Hardware layout overrides for the number of nodes, cores per node, and threads per core. Defaults to 1 for each value; scheduler environment variables take precedence. These counts are used to set the correct -ntomp for GROMACS. metad_settings : Parameters of the metadynamics simulation n_steps : Number of steps for the metadynamics run. 2 fs step size. defaults to 800 ns. metad_height : Height of the deposited Guassians. Defaults to 3.0 kJ/mol. metad_pace : Pace of deposition. Defaults to 500 steps. metad_bias_factor : Biasing factor for the PBMetaD bias. Defaults to 20. postprocess_settings : Parameters for the post-processing and free energy calculations. discard_initial : Initial duration of the PBMetaD simulation to discard for free energy calculations in ns. Defaults to 100 ns. n_folds : Number of folds for block-analysis and uncertainty quantification. Defaults to 5. Step 4: Free energy calculation This step does not require a separate settings file as the parameters are set by the settings file in step 3. The post-processing step calculates the 3D integral of the bound basin and the unbound region and reports $\\Delta G$ of binding in kJ/mol and $K_d$ in $\\mu M$. The report is created in complex_output_dir/{PCC sequence}_{target name}/metadata.JSON . \ud83d\udcdc License This project is licensed under the MIT License.","title":"PCC-FECalc"},{"location":"#pcc-fecalc-binding-free-energy-calculations-for-protein-catalyzed-capture-agents","text":"","title":"PCC-FECalc: Binding Free Energy Calculations for Protein-Catalyzed Capture Agents"},{"location":"#overview","text":"This repository provides a python framework for performing binding free energy calculations for a user-defined target molecule and a protein-catalyzed capture (PCC) agent with a user-defined epitope sequence. The core of this package is based on \"High-throughput virtual screening of protein-catalyzed capture agents for novel hydrogel-nanoparticle fentanyl sensors\" and the corresponding repository . Please refer to the original paper for a more technical explanation of the theory and the setup behind the free energy calculations done with this framework. For setup instructions, see Installation instructions .","title":"\ud83d\udcd6 Overview"},{"location":"#features","text":"The framework is organized into four main submodules that work in serial to perform a complete binding free energy calculation using GROMACS: PCCBuilder : This object creates a PCC with a given sequence, calculates GAFF2 parameters for it, and minimizes it. TargetMOL : Similar to PCCBuilder , creates input structures and force field parameters for a provided target molecule. FECalc : Brings together the PCC and the target molecule, solvates them in a water box, and performs minimization, NVT, and NPT equilibration, runs a parallel-bias metadynamics simulation, and reweights the resulting trajectory for free energy calculations. postprocess : Uses the reweighted statistics to calculate the 3D binding free energy volume of the PCC-molecule complex and calculates the binding free energy and dissociation constant.","title":"\ud83d\ude80 Features"},{"location":"#usage","text":"See example/pcc_submit_test.py for a sample calculation setup. This framework additionally relies on PyMOL and acpype for PCC mutations and GAFF2 parameter generation. acpype is installed automatically as a Python package. PyMOL is required but not installed automatically because no pip wheel is available. Install PyMOL separately from pymol.org or build from the open-source GitHub repository . There's also a conda package package available: conda install -c conda-forge pymol-open-source Ensure the pymol executable is on your PATH . The acpype workflow uses the sqm program from AmberTools, so install AmberTools and libgfortran5 after setting up the repository: conda install -c conda-forge ambertools libgfortran5 The calculations happen through four steps and each step requires a JSON files with the necessary user parameters:","title":"\ud83d\udee0 Usage"},{"location":"#step-1-building-the-pcc","text":"The settings file for this step is pre-made in FECalc/PCCBuilder_settings.JSON and generally requires no modification. By default, calling PCCBuilder.create will halt after each major stage so you can manually inspect the generated PCC structure and the parameters produced by acpype . Rerun the method to continue to the next step. If you prefer to run the entire preparation in one go, call PCCBuilder.create(check=False) to skip these pauses.","title":"Step 1: Building the PCC"},{"location":"#step-2-building-the-target","text":"The settings file for this step should be created by the user. Two example are provided in example/ACT_settings.JSON for acetaminophen and example/FEN_settings.JSON for fentanyl. The mandatory entries are: name : Name of the target. Used for creating subdirectories and making reports. charge : Total charge of the target. anchor1 : Anchor point defined using the atoms on the target molecule. This is used together with anchor2 to define a vector that is used in determining the relative position and orientation of the target molecule with respect to the PCC during the PBMetaD calculations. See the original publication for a detailed explanation of how this vector is used in the collective variables. anchor2 : See above. output_dir : Path to the folder to store the parameter calculations and minimization. input_pdb_dir : Input pdb file of the target molecule structure.","title":"Step 2: Building the target"},{"location":"#step-3-enhanced-sampling-calculations","text":"The settings file for this step should be created by the user. An example is provided in example/system_settings.JSON . The mandatory entries are: PCC_output_dir : Path to the output folder that holds the PCC calculations. PCC_settings_json : Path to the JSON file for the PCC. MOL_settings_json : Path to the JSON file for the target. temperature : Temperature of the simulations box_size : Size of the simulation box. Cubic periodic. complex_output_dir : Path to the out directory for the free energy calculations. The contents of this directory will be as follows: {PCC sequence}_{target name}/ \u2502-- em/ # Minimization \u2502-- nvt/ # NVT equilibration \u2502-- npt/ # NPT equilibration \u2502-- md/ # PBMetaD simulation \u2502-- reweight/ # Reweighting The optional entries are: scheduler : Scheduler used to allocate hardware resources. Supported options are \"local\" (default), \"slurm\" , \"pbs\" , and \"lsf\" . nodes , cores , threads : Hardware layout overrides for the number of nodes, cores per node, and threads per core. Defaults to 1 for each value; scheduler environment variables take precedence. These counts are used to set the correct -ntomp for GROMACS. metad_settings : Parameters of the metadynamics simulation n_steps : Number of steps for the metadynamics run. 2 fs step size. defaults to 800 ns. metad_height : Height of the deposited Guassians. Defaults to 3.0 kJ/mol. metad_pace : Pace of deposition. Defaults to 500 steps. metad_bias_factor : Biasing factor for the PBMetaD bias. Defaults to 20. postprocess_settings : Parameters for the post-processing and free energy calculations. discard_initial : Initial duration of the PBMetaD simulation to discard for free energy calculations in ns. Defaults to 100 ns. n_folds : Number of folds for block-analysis and uncertainty quantification. Defaults to 5.","title":"Step 3: Enhanced sampling calculations"},{"location":"#step-4-free-energy-calculation","text":"This step does not require a separate settings file as the parameters are set by the settings file in step 3. The post-processing step calculates the 3D integral of the bound basin and the unbound region and reports $\\Delta G$ of binding in kJ/mol and $K_d$ in $\\mu M$. The report is created in complex_output_dir/{PCC sequence}_{target name}/metadata.JSON .","title":"Step 4: Free energy calculation"},{"location":"#license","text":"This project is licensed under the MIT License.","title":"\ud83d\udcdc License"},{"location":"api/","text":"API Reference Build peptide capture constructs (PCCs) composed of D-amino acids. The builder mutates a reference PCC to the desired sequence, generates AMBER parameters with acpype , and prepares a solvated and equilibrated structure for subsequent free-energy calculations. __init__ ( pcc , base_dir , settings_json , * , nodes = 1 , cores = 1 , threads = 1 ) Setup the PCCBuilder directories. Parameters: Name Type Description Default pcc str single letter string of AAs, ordered from arm to bead on the PCC structure. required base_dir Path directory to store the calculations required settings_json Path directory of settings.JSON file required nodes int number of nodes. Defaults to 1 . 1 cores int cores per node. Defaults to 1 . 1 threads int threads per core. Defaults to 1 . 1 Raises: Type Description ValueError Raises Value error if base_dir is not a directory. create ( * , check = True ) Build, parameterize, and minimize a PCC. This wrapper orchestrates the full PCC preparation workflow by sequentially calling :meth: _create_pcc , :meth: _get_params , and :meth: _minimize_PCC . Each stage is skipped if a corresponding .done file is present. Parameters: Name Type Description Default check bool If True (default), pause after PCC creation and after parameter generation to allow manual inspection of the intermediate structures. Rerun the method to continue to the next stage. If False , proceed through all stages without interruption. True Returns: Type Description None None Handle preparation of the small-molecule target. The class loads user-provided settings, generates force-field parameters with acpype , minimizes the structure, and exports the files required for complex assembly with a PCC. __init__ ( settings_json , * , nodes = 1 , cores = 1 , threads = 1 ) Initialize the target molecule from a settings file. Parameters: Name Type Description Default settings_json Path Path to a JSON file with target configuration and I/O paths. required nodes int number of nodes. Defaults to 1 . 1 cores int cores per node. Defaults to 1 . 1 threads int threads per core. Defaults to 1 . 1 create () Prepare the target molecule for use in FE calculations. This wrapper runs acpype to generate parameters, minimizes the structure, and exports the relevant files. Each step is skipped if a .done marker exists. Returns: Type Description None None Compute PCC\u2013target binding free energies via PBMetaD simulations. The workflow constructs the peptide capture construct (PCC) and target, generates AMBER parameters with acpype , equilibrates the complex in solution, runs parallel-bias metadynamics (PBMetaD), and prepares the output for free-energy analysis. __init__ ( pcc , target , base_dir , temp , box , * , nodes = 1 , cores = 1 , threads = 1 , ** kwargs ) Setup the base, PCC, and complex directories, and locate the target molecule files. Parameters: Name Type Description Default pcc PCCBuilder PCC structure for FE calculations. required target TargetMol Target molecule for FE calculations. required base_dir Path directory to store the calculations required temp float Temperature of the simulations required box float Size of the simulation box required nodes int number of nodes. Defaults to 1 . 1 cores int cores per node. Defaults to 1 . 1 threads int threads per core. Defaults to 1 . 1 Raises: Type Description ValueError Raises Value error if base_dir is not a directory. run ( n_steps = None ) Execute the full free-energy calculation workflow. The routine builds the complex, equilibrates it, performs PBMetaD, and reweights the resulting trajectory. The number of PBMetaD steps can be overridden with n_steps . Parameters: Name Type Description Default n_steps int Override the number of PBMetaD simulation steps. None Returns: Type Description tuple None update_mdp ( mdp_in , mdp_out , n_steps = None ) Update MDP files with the target temperature and step count. Parameters: Name Type Description Default mdp_in Path Path to the input template. required mdp_out Path Path to the output file. required n_steps int Number of steps to set in the output. If None the value from the template is retained. None Returns: Type Description None postprocess ( fecalc , ** kwargs ) Analyse a completed FECalc run and compute binding free energy. This is the primary user-facing function. It expects that the PBMetaD simulation has been reweighted (see :meth: FECalc._reweight ) and uses the resulting COLVAR file to compute the binding free energy and dissociation constant. Internally, the following steps are performed: Read the COLVAR file with :func: _load_plumed . Discard the first discard_initial nanoseconds of data. Perform block analysis via :func: _block_anal_3d using n_folds blocks to estimate statistical uncertainty. Integrate the bound (dCOM < 2 nm) and unbound regions to obtain the free energy (:func: _calc_FE ). Convert the free energy to a dissociation constant with :func: _calc_K . Write a metadata.JSON summary with :func: _write_report . Parameters: Name Type Description Default fecalc FECalc Completed :class: FECalc object. required **kwargs Optional arguments controlling the analysis. discard_initial (float): Time in nanoseconds to discard from the start of the trajectory. Defaults to 1 ns. n_folds (int): Number of blocks for block analysis. Defaults to 5. {} Returns: Type Description None None postprocess_wrapper ( PCC , target , ifdir , temperature , init_time , n_folds , box_size ) Command-line wrapper around :func: postprocess . Parameters: Name Type Description Default PCC str PCC identifier. required target str Target molecule name. required ifdir str or Path Input directory containing simulation output. required temperature float Simulation temperature in kelvin. required init_time float Initial time (ns) to discard. required n_folds int Number of blocks for block analysis. required box_size float Simulation box edge length (nm). required Returns: Type Description None None cd Context manager for changing the current working directory. __enter__ () Change to the new working directory. __exit__ ( etype , value , traceback ) Return to the original working directory. __init__ ( newPath ) Store the new working directory. extract_timestep ( mdp_file ) Return the dt value from a GROMACS .mdp file. Parameters mdp_file : Path Path to the .mdp file to parse. Returns str The timestep specified by the dt field. Raises ValueError If the dt field is not present in the file. run_gmx ( cmd , ** kwargs ) Run a gmx command with improved error reporting. Parameters cmd : list or str Command passed to :func: subprocess.run . If a string is provided it is executed with shell=True . **kwargs : dict Additional keyword arguments forwarded to subprocess.run . Raises RuntimeError If the command exits with a non-zero status. The raised error includes the command, stdout and stderr to aid debugging. set_hw_env ( scheduler , nodes , cores , threads ) Resolve hardware settings for various job schedulers. Parameters scheduler : str Name of the scheduler (e.g. \"slurm\" , \"pbs\" , \"lsf\" , \"local\" ). nodes : int Default number of nodes requested. cores : int Default number of cores per node. threads : int Default number of threads per core. Returns tuple[int, int, int] Resolved (nodes, cores, threads) based on environment variables for the given scheduler. The environment is not modified.","title":"API docs"},{"location":"api/#api-reference","text":"Build peptide capture constructs (PCCs) composed of D-amino acids. The builder mutates a reference PCC to the desired sequence, generates AMBER parameters with acpype , and prepares a solvated and equilibrated structure for subsequent free-energy calculations.","title":"API Reference"},{"location":"api/#FECalc.PCCBuilder.PCCBuilder.__init__","text":"Setup the PCCBuilder directories. Parameters: Name Type Description Default pcc str single letter string of AAs, ordered from arm to bead on the PCC structure. required base_dir Path directory to store the calculations required settings_json Path directory of settings.JSON file required nodes int number of nodes. Defaults to 1 . 1 cores int cores per node. Defaults to 1 . 1 threads int threads per core. Defaults to 1 . 1 Raises: Type Description ValueError Raises Value error if base_dir is not a directory.","title":"__init__"},{"location":"api/#FECalc.PCCBuilder.PCCBuilder.create","text":"Build, parameterize, and minimize a PCC. This wrapper orchestrates the full PCC preparation workflow by sequentially calling :meth: _create_pcc , :meth: _get_params , and :meth: _minimize_PCC . Each stage is skipped if a corresponding .done file is present. Parameters: Name Type Description Default check bool If True (default), pause after PCC creation and after parameter generation to allow manual inspection of the intermediate structures. Rerun the method to continue to the next stage. If False , proceed through all stages without interruption. True Returns: Type Description None None Handle preparation of the small-molecule target. The class loads user-provided settings, generates force-field parameters with acpype , minimizes the structure, and exports the files required for complex assembly with a PCC.","title":"create"},{"location":"api/#FECalc.TargetMOL.TargetMOL.__init__","text":"Initialize the target molecule from a settings file. Parameters: Name Type Description Default settings_json Path Path to a JSON file with target configuration and I/O paths. required nodes int number of nodes. Defaults to 1 . 1 cores int cores per node. Defaults to 1 . 1 threads int threads per core. Defaults to 1 . 1","title":"__init__"},{"location":"api/#FECalc.TargetMOL.TargetMOL.create","text":"Prepare the target molecule for use in FE calculations. This wrapper runs acpype to generate parameters, minimizes the structure, and exports the relevant files. Each step is skipped if a .done marker exists. Returns: Type Description None None Compute PCC\u2013target binding free energies via PBMetaD simulations. The workflow constructs the peptide capture construct (PCC) and target, generates AMBER parameters with acpype , equilibrates the complex in solution, runs parallel-bias metadynamics (PBMetaD), and prepares the output for free-energy analysis.","title":"create"},{"location":"api/#FECalc.FECalc.FECalc.__init__","text":"Setup the base, PCC, and complex directories, and locate the target molecule files. Parameters: Name Type Description Default pcc PCCBuilder PCC structure for FE calculations. required target TargetMol Target molecule for FE calculations. required base_dir Path directory to store the calculations required temp float Temperature of the simulations required box float Size of the simulation box required nodes int number of nodes. Defaults to 1 . 1 cores int cores per node. Defaults to 1 . 1 threads int threads per core. Defaults to 1 . 1 Raises: Type Description ValueError Raises Value error if base_dir is not a directory.","title":"__init__"},{"location":"api/#FECalc.FECalc.FECalc.run","text":"Execute the full free-energy calculation workflow. The routine builds the complex, equilibrates it, performs PBMetaD, and reweights the resulting trajectory. The number of PBMetaD steps can be overridden with n_steps . Parameters: Name Type Description Default n_steps int Override the number of PBMetaD simulation steps. None Returns: Type Description tuple None","title":"run"},{"location":"api/#FECalc.FECalc.FECalc.update_mdp","text":"Update MDP files with the target temperature and step count. Parameters: Name Type Description Default mdp_in Path Path to the input template. required mdp_out Path Path to the output file. required n_steps int Number of steps to set in the output. If None the value from the template is retained. None Returns: Type Description None","title":"update_mdp"},{"location":"api/#FECalc.postprocess.postprocess","text":"Analyse a completed FECalc run and compute binding free energy. This is the primary user-facing function. It expects that the PBMetaD simulation has been reweighted (see :meth: FECalc._reweight ) and uses the resulting COLVAR file to compute the binding free energy and dissociation constant. Internally, the following steps are performed: Read the COLVAR file with :func: _load_plumed . Discard the first discard_initial nanoseconds of data. Perform block analysis via :func: _block_anal_3d using n_folds blocks to estimate statistical uncertainty. Integrate the bound (dCOM < 2 nm) and unbound regions to obtain the free energy (:func: _calc_FE ). Convert the free energy to a dissociation constant with :func: _calc_K . Write a metadata.JSON summary with :func: _write_report . Parameters: Name Type Description Default fecalc FECalc Completed :class: FECalc object. required **kwargs Optional arguments controlling the analysis. discard_initial (float): Time in nanoseconds to discard from the start of the trajectory. Defaults to 1 ns. n_folds (int): Number of blocks for block analysis. Defaults to 5. {} Returns: Type Description None None","title":"postprocess"},{"location":"api/#FECalc.postprocess.postprocess_wrapper","text":"Command-line wrapper around :func: postprocess . Parameters: Name Type Description Default PCC str PCC identifier. required target str Target molecule name. required ifdir str or Path Input directory containing simulation output. required temperature float Simulation temperature in kelvin. required init_time float Initial time (ns) to discard. required n_folds int Number of blocks for block analysis. required box_size float Simulation box edge length (nm). required Returns: Type Description None None","title":"postprocess_wrapper"},{"location":"api/#FECalc.utils.cd","text":"Context manager for changing the current working directory.","title":"cd"},{"location":"api/#FECalc.utils.cd.__enter__","text":"Change to the new working directory.","title":"__enter__"},{"location":"api/#FECalc.utils.cd.__exit__","text":"Return to the original working directory.","title":"__exit__"},{"location":"api/#FECalc.utils.cd.__init__","text":"Store the new working directory.","title":"__init__"},{"location":"api/#FECalc.utils.extract_timestep","text":"Return the dt value from a GROMACS .mdp file.","title":"extract_timestep"},{"location":"api/#FECalc.utils.extract_timestep--parameters","text":"mdp_file : Path Path to the .mdp file to parse.","title":"Parameters"},{"location":"api/#FECalc.utils.extract_timestep--returns","text":"str The timestep specified by the dt field.","title":"Returns"},{"location":"api/#FECalc.utils.extract_timestep--raises","text":"ValueError If the dt field is not present in the file.","title":"Raises"},{"location":"api/#FECalc.utils.run_gmx","text":"Run a gmx command with improved error reporting.","title":"run_gmx"},{"location":"api/#FECalc.utils.run_gmx--parameters","text":"cmd : list or str Command passed to :func: subprocess.run . If a string is provided it is executed with shell=True . **kwargs : dict Additional keyword arguments forwarded to subprocess.run .","title":"Parameters"},{"location":"api/#FECalc.utils.run_gmx--raises","text":"RuntimeError If the command exits with a non-zero status. The raised error includes the command, stdout and stderr to aid debugging.","title":"Raises"},{"location":"api/#FECalc.utils.set_hw_env","text":"Resolve hardware settings for various job schedulers.","title":"set_hw_env"},{"location":"api/#FECalc.utils.set_hw_env--parameters","text":"scheduler : str Name of the scheduler (e.g. \"slurm\" , \"pbs\" , \"lsf\" , \"local\" ). nodes : int Default number of nodes requested. cores : int Default number of cores per node. threads : int Default number of threads per core.","title":"Parameters"},{"location":"api/#FECalc.utils.set_hw_env--returns","text":"tuple[int, int, int] Resolved (nodes, cores, threads) based on environment variables for the given scheduler. The environment is not modified.","title":"Returns"},{"location":"examples/example1/","text":"Example 1 The example directory demonstrates how to run a complete binding free energy calculation with PCC-FECalc. It contains sample settings files and a submission script: pcc_submit_example.py \u2013 orchestrates a full calculation using the library classes. ACT_settings.JSON and FEN_settings.JSON \u2013 example target molecule configurations. system_settings.JSON \u2013 describes simulation parameters and paths used by the submission script. ACT.pdb and FEN.pdb \u2013 coordinate files for the acetaminophen and fentanyl targets. To try the example, adjust the paths in system_settings.JSON as needed and run: python pcc_submit_example.py The script will build the PCC, prepare the target molecule, run the enhanced sampling calculation, and post-process the results to report the binding free energy.","title":"Example 1"},{"location":"examples/example1/#example-1","text":"The example directory demonstrates how to run a complete binding free energy calculation with PCC-FECalc. It contains sample settings files and a submission script: pcc_submit_example.py \u2013 orchestrates a full calculation using the library classes. ACT_settings.JSON and FEN_settings.JSON \u2013 example target molecule configurations. system_settings.JSON \u2013 describes simulation parameters and paths used by the submission script. ACT.pdb and FEN.pdb \u2013 coordinate files for the acetaminophen and fentanyl targets. To try the example, adjust the paths in system_settings.JSON as needed and run: python pcc_submit_example.py The script will build the PCC, prepare the target molecule, run the enhanced sampling calculation, and post-process the results to report the binding free energy.","title":"Example 1"},{"location":"installation/instructions/","text":"Instructions To install PCC-FECalc from source, clone the repository and install the package in editable mode: git clone https://github.com/arminshzd/PCC-FECalc.git cd PCC-FECalc pip install -e . After installing the repository, add AmberTools and libgfortran5 to enable the sqm program: conda install -c conda-forge ambertools libgfortran5 Note: PyMOL is required but not installed automatically because no pip wheel is available. Install PyMOL separately from pymol.org or build from the open-source GitHub repository . There's also a conda package package available: bash conda install -c conda-forge pymol-open-source Ensure the pymol executable is on your PATH .","title":"Instructions"},{"location":"installation/instructions/#instructions","text":"To install PCC-FECalc from source, clone the repository and install the package in editable mode: git clone https://github.com/arminshzd/PCC-FECalc.git cd PCC-FECalc pip install -e . After installing the repository, add AmberTools and libgfortran5 to enable the sqm program: conda install -c conda-forge ambertools libgfortran5 Note: PyMOL is required but not installed automatically because no pip wheel is available. Install PyMOL separately from pymol.org or build from the open-source GitHub repository . There's also a conda package package available: bash conda install -c conda-forge pymol-open-source Ensure the pymol executable is on your PATH .","title":"Instructions"},{"location":"installation/modifications/","text":"Modifications AmberTools' sqm executable is required for parameter generation and depends on libgfortran5 . Install them after setting up the repository: conda install -c conda-forge ambertools libgfortran5 PyMOL is required but not installed automatically because no pip wheel is available. Install PyMOL separately from pymol.org or build from the open-source GitHub repository . There's also a conda package package available: conda install -c conda-forge pymol-open-source Ensure the pymol executable is on your PATH . The default installation covers the core features of PCC-FECalc. Depending on your workflow, you may wish to install optional extras or adjust configuration files: Documentation build : pip install .[docs] installs mkdocs and related plugins for building the documentation. Testing : pip install .[test] installs pytest for running the test suite. Scheduler settings : edit the system_settings.JSON example to match your cluster's scheduler (e.g., slurm , pbs , or lsf ). These adjustments allow the package to integrate with different environments and use cases.","title":"Modifications"},{"location":"installation/modifications/#modifications","text":"AmberTools' sqm executable is required for parameter generation and depends on libgfortran5 . Install them after setting up the repository: conda install -c conda-forge ambertools libgfortran5 PyMOL is required but not installed automatically because no pip wheel is available. Install PyMOL separately from pymol.org or build from the open-source GitHub repository . There's also a conda package package available: conda install -c conda-forge pymol-open-source Ensure the pymol executable is on your PATH . The default installation covers the core features of PCC-FECalc. Depending on your workflow, you may wish to install optional extras or adjust configuration files: Documentation build : pip install .[docs] installs mkdocs and related plugins for building the documentation. Testing : pip install .[test] installs pytest for running the test suite. Scheduler settings : edit the system_settings.JSON example to match your cluster's scheduler (e.g., slurm , pbs , or lsf ). These adjustments allow the package to integrate with different environments and use cases.","title":"Modifications"}]}